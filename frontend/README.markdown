# Frontend for Course Recommendation System

This is the frontend for a course recommendation system, built with React, TypeScript, Vite, TailwindCSS, and Shadcn UI. It connects to a backend API to suggest courses based on the user's program, term, failed courses, and available time slots. The app features a modern UI with responsive design, dark mode support, and reusable components.

## Project Structure
- `src/`: Source code, including components, pages, hooks, and utilities.
  - `components/`: Reusable UI components (e.g., Shadcn UI components).
  - `App.tsx`: Main app component.
  - `main.tsx`: Entry point for the React app.
- `public/`: Static assets (e.g., `index.html`, favicon, images).
- `tailwind.config.ts`: TailwindCSS configuration with custom themes and animations.
- `vite.config.ts`: Vite configuration with React SWC plugin and alias (`@/` for `src/`).
- `postcss.config.js`: PostCSS setup for TailwindCSS and Autoprefixer.
- `tsconfig.json`, `tsconfig.app.json`, `tsconfig.node.json`: TypeScript configurations.
- `package.json`: Dependencies and scripts.
- `.gitignore`: Ignores unnecessary files (e.g., `node_modules`, `.env`).
- `.env`: Environment variables (e.g., API URL). *Not tracked in Git*.

## Prerequisites
- Node.js 16+ (recommended: 18+)
- A running backend server (e.g., at `http://localhost:8000`) for API requests.

## Installation
1. Clone the repository:
   ```bash
   git clone <repository-url>
   cd frontend
   ```
2. Install dependencies:
   ```bash
   npm install
   ```

## Running the App
- **Development** (with hot-reloading):
  ```bash
  npm run dev
  ```
  The app runs on `http://localhost:8080`.
- **Build** (for production):
  ```bash
  npm run build
  ```
  Output is generated in the `dist/` folder.
- **Preview** (test the production build locally):
  ```bash
  npm run preview
  ```
- **Lint** (check code quality):
  ```bash
  npm run lint
  ```

## Features
- **Responsive Design**: Built with TailwindCSS for mobile and desktop compatibility.
- **Dark Mode**: Supported via `next-themes` (toggle in UI).
- **API Integration**: Connects to the backend `/get_courses` endpoint to fetch course recommendations.
- **Reusable Components**: Uses Shadcn UI components for a consistent and modern look.
- **Type Safety**: TypeScript ensures type-safe code with custom paths (`@/` for `src/`).
- **Query Management**: Uses TanStack Query for efficient API requests.

## Example API Request
The frontend sends POST requests to the backend's `/get_courses` endpoint. Example payload:
```json
{
  "program": "مهندسی برق",
  "term": 1,
  "course": ["ریاضی 1"],
  "time": {"شنبه": ["08:00-10:00"]}
}
```

## Notes
- Ensure the backend is running at the URL specified in `VITE_API_URL` (default: `http://localhost:8000`).
- The backend must allow CORS for `http://localhost:8080` (configured in `api.py`).
- Sensitive data (e.g., `.env`) is ignored by `.gitignore` to prevent exposure on GitHub.
- For production deployment (e.g., Vercel, Netlify), use the `dist/` folder generated by `npm run build`.

## Troubleshooting
- **CORS Errors**: Verify that the backend allows requests from `http://localhost:8080`.
- **Dependency Issues**: Run `npm install` again or delete `node_modules` and `package-lock.json`, then reinstall.
- **Build Errors**: Check TypeScript errors with `npm run lint` or ensure all imports use `@/` alias correctly.
- **API Connection**: Ensure the backend server is running and the `VITE_API_URL` is correct in `.env`.